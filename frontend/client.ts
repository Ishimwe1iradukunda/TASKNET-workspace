// Code generated by the Encore 1.49.1 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly chat: chat.ServiceClient
    public readonly notification: notification.ServiceClient
    public readonly reminders: reminders.ServiceClient
    public readonly workspace: workspace.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.chat = new chat.ServiceClient(base)
        this.notification = new notification.ServiceClient(base)
        this.reminders = new reminders.ServiceClient(base)
        this.workspace = new workspace.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { chat as api_chat_chat_chat } from "~backend/chat/chat";

export namespace chat {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.chat = this.chat.bind(this)
        }

        /**
         * chat is a bidirectional streaming API for real-time chat in projects.
         */
        public async chat(params: RequestType<typeof api_chat_chat_chat>): Promise<StreamInOut<StreamRequest<typeof api_chat_chat_chat>, StreamResponse<typeof api_chat_chat_chat>>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                projectId: params.projectId,
            })

            return await this.baseClient.createStreamInOut(`/chat`, {query})
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { listNotifications as api_notification_list_listNotifications } from "~backend/notification/list";
import { markAsRead as api_notification_mark_as_read_markAsRead } from "~backend/notification/mark_as_read";
import {
    getSettings as api_notification_settings_getSettings,
    updateSettings as api_notification_settings_updateSettings
} from "~backend/notification/settings";

export namespace notification {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getSettings = this.getSettings.bind(this)
            this.listNotifications = this.listNotifications.bind(this)
            this.markAllAsRead = this.markAllAsRead.bind(this)
            this.markAsRead = this.markAsRead.bind(this)
            this.updateSettings = this.updateSettings.bind(this)
        }

        /**
         * getSettings retrieves notification settings for the current user.
         */
        public async getSettings(): Promise<ResponseType<typeof api_notification_settings_getSettings>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications/settings`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_notification_settings_getSettings>
        }

        /**
         * listNotifications retrieves all notifications for the current user.
         */
        public async listNotifications(): Promise<ResponseType<typeof api_notification_list_listNotifications>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notifications`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_notification_list_listNotifications>
        }

        /**
         * markAllAsRead marks all unread notifications as read.
         */
        public async markAllAsRead(): Promise<void> {
            await this.baseClient.callTypedAPI(`/notifications/read-all`, {method: "PUT", body: undefined})
        }

        /**
         * markAsRead marks a single notification as read.
         */
        public async markAsRead(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/notifications/${encodeURIComponent(params.id)}/read`, {method: "PUT", body: undefined})
        }

        /**
         * updateSettings updates notification settings for the current user.
         */
        public async updateSettings(params: RequestType<typeof api_notification_settings_updateSettings>): Promise<void> {
            await this.baseClient.callTypedAPI(`/notifications/settings`, {method: "PUT", body: JSON.stringify(params)})
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createReminder as api_reminders_create_createReminder } from "~backend/reminders/create";
import { deleteReminder as api_reminders_delete_deleteReminder } from "~backend/reminders/delete";
import { listReminders as api_reminders_list_listReminders } from "~backend/reminders/list";

export namespace reminders {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createReminder = this.createReminder.bind(this)
            this.deleteReminder = this.deleteReminder.bind(this)
            this.listReminders = this.listReminders.bind(this)
        }

        /**
         * Creates a new reminder.
         */
        public async createReminder(params: RequestType<typeof api_reminders_create_createReminder>): Promise<ResponseType<typeof api_reminders_create_createReminder>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reminders`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_reminders_create_createReminder>
        }

        /**
         * Deletes a reminder.
         */
        public async deleteReminder(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/reminders/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves all reminders.
         */
        public async listReminders(): Promise<ResponseType<typeof api_reminders_list_listReminders>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/reminders`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_reminders_list_listReminders>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { createAutomation as api_workspace_create_createAutomation } from "~backend/automations/create";
import { listAutomations as api_workspace_list_listAutomations } from "~backend/automations/list";
import { createCustomField as api_workspace_create_createCustomField } from "~backend/custom-fields/create";
import { listCustomFields as api_workspace_list_listCustomFields } from "~backend/custom-fields/list";
import { exportData as api_workspace_export_exportData } from "~backend/data/export";
import { importData as api_workspace_import_importData } from "~backend/data/import";
import { deleteDocument as api_workspace_delete_deleteDocument } from "~backend/documents/delete";
import { getDocument as api_workspace_get_getDocument } from "~backend/documents/get";
import { listDocuments as api_workspace_list_listDocuments } from "~backend/documents/list";
import { getUploadUrl as api_workspace_upload_url_getUploadUrl } from "~backend/documents/upload_url";
import { deleteEmail as api_workspace_delete_deleteEmail } from "~backend/emails/delete";
import { listEmails as api_workspace_list_listEmails } from "~backend/emails/list";
import { updateEmail as api_workspace_update_updateEmail } from "~backend/emails/update";
import { createForm as api_workspace_create_createForm } from "~backend/forms/create";
import { listForms as api_workspace_list_listForms } from "~backend/forms/list";
import { createGoal as api_workspace_create_createGoal } from "~backend/goals/create";
import { listGoals as api_workspace_list_listGoals } from "~backend/goals/list";
import { createNote as api_workspace_create_createNote } from "~backend/notes/create";
import { deleteNote as api_workspace_delete_deleteNote } from "~backend/notes/delete";
import { getNote as api_workspace_get_getNote } from "~backend/notes/get";
import { listNotes as api_workspace_list_listNotes } from "~backend/notes/list";
import { updateNote as api_workspace_update_updateNote } from "~backend/notes/update";
import { compressPdf as api_workspace_compress_compressPdf } from "~backend/pdf/compress";
import {
    convertImageToPdf as api_workspace_convert_convertImageToPdf,
    convertPdfToImages as api_workspace_convert_convertPdfToImages
} from "~backend/pdf/convert";
import { mergePdf as api_workspace_merge_mergePdf } from "~backend/pdf/merge";
import { splitPdf as api_workspace_split_splitPdf } from "~backend/pdf/split";
import { createPortfolio as api_workspace_create_createPortfolio } from "~backend/portfolios/create";
import { listPortfolios as api_workspace_list_listPortfolios } from "~backend/portfolios/list";
import { createProject as api_workspace_create_createProject } from "~backend/projects/create";
import { deleteProject as api_workspace_delete_deleteProject } from "~backend/projects/delete";
import { listProjects as api_workspace_list_listProjects } from "~backend/projects/list";
import { updateProject as api_workspace_update_updateProject } from "~backend/projects/update";
import { enterpriseSearch as api_workspace_enterprise_enterpriseSearch } from "~backend/search/enterprise";
import { createSprint as api_workspace_create_createSprint } from "~backend/sprints/create";
import { listSprints as api_workspace_list_listSprints } from "~backend/sprints/list";
import { createTask as api_workspace_create_createTask } from "~backend/tasks/create";
import { deleteTask as api_workspace_delete_deleteTask } from "~backend/tasks/delete";
import { listTasks as api_workspace_list_listTasks } from "~backend/tasks/list";
import { updateTask as api_workspace_update_updateTask } from "~backend/tasks/update";
import {
    listTimeEntries as api_workspace_tracking_listTimeEntries,
    startTimeEntry as api_workspace_tracking_startTimeEntry,
    stopTimeEntry as api_workspace_tracking_stopTimeEntry
} from "~backend/time/tracking";
import { createWiki as api_workspace_create_createWiki } from "~backend/wikis/create";
import { deleteWiki as api_workspace_delete_deleteWiki } from "~backend/wikis/delete";
import { listWikis as api_workspace_list_listWikis } from "~backend/wikis/list";
import { updateWiki as api_workspace_update_updateWiki } from "~backend/wikis/update";

export namespace workspace {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.compressPdf = this.compressPdf.bind(this)
            this.convertImageToPdf = this.convertImageToPdf.bind(this)
            this.convertPdfToImages = this.convertPdfToImages.bind(this)
            this.createAutomation = this.createAutomation.bind(this)
            this.createCustomField = this.createCustomField.bind(this)
            this.createForm = this.createForm.bind(this)
            this.createGoal = this.createGoal.bind(this)
            this.createNote = this.createNote.bind(this)
            this.createPortfolio = this.createPortfolio.bind(this)
            this.createProject = this.createProject.bind(this)
            this.createSprint = this.createSprint.bind(this)
            this.createTask = this.createTask.bind(this)
            this.createWiki = this.createWiki.bind(this)
            this.deleteDocument = this.deleteDocument.bind(this)
            this.deleteEmail = this.deleteEmail.bind(this)
            this.deleteNote = this.deleteNote.bind(this)
            this.deleteProject = this.deleteProject.bind(this)
            this.deleteTask = this.deleteTask.bind(this)
            this.deleteWiki = this.deleteWiki.bind(this)
            this.enterpriseSearch = this.enterpriseSearch.bind(this)
            this.exportData = this.exportData.bind(this)
            this.getDocument = this.getDocument.bind(this)
            this.getNote = this.getNote.bind(this)
            this.getUploadUrl = this.getUploadUrl.bind(this)
            this.importData = this.importData.bind(this)
            this.listAutomations = this.listAutomations.bind(this)
            this.listCustomFields = this.listCustomFields.bind(this)
            this.listDocuments = this.listDocuments.bind(this)
            this.listEmails = this.listEmails.bind(this)
            this.listForms = this.listForms.bind(this)
            this.listGoals = this.listGoals.bind(this)
            this.listNotes = this.listNotes.bind(this)
            this.listPortfolios = this.listPortfolios.bind(this)
            this.listProjects = this.listProjects.bind(this)
            this.listSprints = this.listSprints.bind(this)
            this.listTasks = this.listTasks.bind(this)
            this.listTimeEntries = this.listTimeEntries.bind(this)
            this.listWikis = this.listWikis.bind(this)
            this.mergePdf = this.mergePdf.bind(this)
            this.splitPdf = this.splitPdf.bind(this)
            this.startTimeEntry = this.startTimeEntry.bind(this)
            this.stopTimeEntry = this.stopTimeEntry.bind(this)
            this.updateEmail = this.updateEmail.bind(this)
            this.updateNote = this.updateNote.bind(this)
            this.updateProject = this.updateProject.bind(this)
            this.updateTask = this.updateTask.bind(this)
            this.updateWiki = this.updateWiki.bind(this)
        }

        /**
         * Compresses a PDF file to reduce its size.
         */
        public async compressPdf(params: RequestType<typeof api_workspace_compress_compressPdf>): Promise<ResponseType<typeof api_workspace_compress_compressPdf>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pdf/compress`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_compress_compressPdf>
        }

        /**
         * Converts multiple images to a single PDF.
         */
        public async convertImageToPdf(params: RequestType<typeof api_workspace_convert_convertImageToPdf>): Promise<ResponseType<typeof api_workspace_convert_convertImageToPdf>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pdf/convert/images-to-pdf`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_convert_convertImageToPdf>
        }

        /**
         * Converts a PDF to individual images.
         */
        public async convertPdfToImages(params: RequestType<typeof api_workspace_convert_convertPdfToImages>): Promise<ResponseType<typeof api_workspace_convert_convertPdfToImages>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pdf/convert/pdf-to-images`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_convert_convertPdfToImages>
        }

        /**
         * Creates a new automation rule.
         */
        public async createAutomation(params: RequestType<typeof api_workspace_create_createAutomation>): Promise<ResponseType<typeof api_workspace_create_createAutomation>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automations`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createAutomation>
        }

        /**
         * Creates a new custom field.
         */
        public async createCustomField(params: RequestType<typeof api_workspace_create_createCustomField>): Promise<ResponseType<typeof api_workspace_create_createCustomField>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/custom-fields`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createCustomField>
        }

        /**
         * Creates a new form.
         */
        public async createForm(params: RequestType<typeof api_workspace_create_createForm>): Promise<ResponseType<typeof api_workspace_create_createForm>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/forms`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createForm>
        }

        /**
         * Creates a new goal.
         */
        public async createGoal(params: RequestType<typeof api_workspace_create_createGoal>): Promise<ResponseType<typeof api_workspace_create_createGoal>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/goals`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createGoal>
        }

        /**
         * Creates a new note.
         */
        public async createNote(params: RequestType<typeof api_workspace_create_createNote>): Promise<ResponseType<typeof api_workspace_create_createNote>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notes`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createNote>
        }

        /**
         * Creates a new portfolio.
         */
        public async createPortfolio(params: RequestType<typeof api_workspace_create_createPortfolio>): Promise<ResponseType<typeof api_workspace_create_createPortfolio>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/portfolios`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createPortfolio>
        }

        /**
         * Creates a new project.
         */
        public async createProject(params: RequestType<typeof api_workspace_create_createProject>): Promise<ResponseType<typeof api_workspace_create_createProject>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createProject>
        }

        /**
         * Creates a new sprint.
         */
        public async createSprint(params: RequestType<typeof api_workspace_create_createSprint>): Promise<ResponseType<typeof api_workspace_create_createSprint>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/sprints`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createSprint>
        }

        /**
         * Creates a new task.
         */
        public async createTask(params: RequestType<typeof api_workspace_create_createTask>): Promise<ResponseType<typeof api_workspace_create_createTask>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createTask>
        }

        /**
         * Creates a new wiki page.
         */
        public async createWiki(params: RequestType<typeof api_workspace_create_createWiki>): Promise<ResponseType<typeof api_workspace_create_createWiki>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wikis`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_create_createWiki>
        }

        /**
         * Deletes a document.
         */
        public async deleteDocument(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/documents/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes an email.
         */
        public async deleteEmail(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/emails/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a note.
         */
        public async deleteNote(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/notes/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a project.
         */
        public async deleteProject(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a task.
         */
        public async deleteTask(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/tasks/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a wiki page.
         */
        public async deleteWiki(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/wikis/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Performs enterprise search across all content types.
         */
        public async enterpriseSearch(params: RequestType<typeof api_workspace_enterprise_enterpriseSearch>): Promise<ResponseType<typeof api_workspace_enterprise_enterpriseSearch>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: params.limit === undefined ? undefined : String(params.limit),
                query: params.query,
                type:  params.type === undefined ? undefined : String(params.type),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/search`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_enterprise_enterpriseSearch>
        }

        /**
         * Exports all workspace data as JSON.
         */
        public async exportData(): Promise<ResponseType<typeof api_workspace_export_exportData>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/data/export`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_export_exportData>
        }

        /**
         * Gets a signed download URL for a document.
         */
        public async getDocument(params: { id: string }): Promise<ResponseType<typeof api_workspace_get_getDocument>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/documents/${encodeURIComponent(params.id)}/download-url`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_get_getDocument>
        }

        /**
         * Retrieves a specific note by ID.
         */
        public async getNote(params: { id: string }): Promise<ResponseType<typeof api_workspace_get_getNote>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notes/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_get_getNote>
        }

        /**
         * Generates a signed URL for uploading a document.
         */
        public async getUploadUrl(params: RequestType<typeof api_workspace_upload_url_getUploadUrl>): Promise<ResponseType<typeof api_workspace_upload_url_getUploadUrl>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/documents/upload-url`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_upload_url_getUploadUrl>
        }

        /**
         * Imports workspace data from JSON.
         */
        public async importData(params: RequestType<typeof api_workspace_import_importData>): Promise<ResponseType<typeof api_workspace_import_importData>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/data/import`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_import_importData>
        }

        /**
         * Retrieves all automation rules.
         */
        public async listAutomations(): Promise<ResponseType<typeof api_workspace_list_listAutomations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/automations`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listAutomations>
        }

        /**
         * Retrieves custom fields with optional filters.
         */
        public async listCustomFields(params: RequestType<typeof api_workspace_list_listCustomFields>): Promise<ResponseType<typeof api_workspace_list_listCustomFields>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                entityType: params.entityType === undefined ? undefined : String(params.entityType),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/custom-fields`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listCustomFields>
        }

        /**
         * Retrieves all documents.
         */
        public async listDocuments(): Promise<ResponseType<typeof api_workspace_list_listDocuments>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/documents`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listDocuments>
        }

        /**
         * Retrieves all emails.
         */
        public async listEmails(): Promise<ResponseType<typeof api_workspace_list_listEmails>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/emails`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listEmails>
        }

        /**
         * Retrieves all forms.
         */
        public async listForms(): Promise<ResponseType<typeof api_workspace_list_listForms>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/forms`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listForms>
        }

        /**
         * Retrieves goals with optional filters.
         */
        public async listGoals(params: RequestType<typeof api_workspace_list_listGoals>): Promise<ResponseType<typeof api_workspace_list_listGoals>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                projectId: params.projectId,
                status:    params.status === undefined ? undefined : String(params.status),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/goals`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listGoals>
        }

        /**
         * Retrieves all notes, optionally filtered by search term or tag.
         */
        public async listNotes(params: RequestType<typeof api_workspace_list_listNotes>): Promise<ResponseType<typeof api_workspace_list_listNotes>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                search: params.search,
                tag:    params.tag,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notes`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listNotes>
        }

        /**
         * Retrieves all portfolios.
         */
        public async listPortfolios(): Promise<ResponseType<typeof api_workspace_list_listPortfolios>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/portfolios`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listPortfolios>
        }

        /**
         * Retrieves all projects, optionally filtered by status.
         */
        public async listProjects(params: RequestType<typeof api_workspace_list_listProjects>): Promise<ResponseType<typeof api_workspace_list_listProjects>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                status: params.status === undefined ? undefined : String(params.status),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listProjects>
        }

        /**
         * Retrieves sprints with optional filters.
         */
        public async listSprints(params: RequestType<typeof api_workspace_list_listSprints>): Promise<ResponseType<typeof api_workspace_list_listSprints>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                projectId: params.projectId,
                status:    params.status === undefined ? undefined : String(params.status),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/sprints`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listSprints>
        }

        /**
         * Retrieves all tasks, optionally filtered by status or tag.
         */
        public async listTasks(params: RequestType<typeof api_workspace_list_listTasks>): Promise<ResponseType<typeof api_workspace_list_listTasks>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                status: params.status === undefined ? undefined : String(params.status),
                tag:    params.tag,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listTasks>
        }

        /**
         * Lists time entries with optional filters.
         */
        public async listTimeEntries(params: RequestType<typeof api_workspace_tracking_listTimeEntries>): Promise<ResponseType<typeof api_workspace_tracking_listTimeEntries>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                endDate:   params.endDate === undefined ? undefined : params.endDate.toISOString(),
                projectId: params.projectId,
                startDate: params.startDate === undefined ? undefined : params.startDate.toISOString(),
                taskId:    params.taskId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/time/entries`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_tracking_listTimeEntries>
        }

        /**
         * Retrieves all wiki pages, optionally filtered by parent or search term.
         */
        public async listWikis(params: RequestType<typeof api_workspace_list_listWikis>): Promise<ResponseType<typeof api_workspace_list_listWikis>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                parentId: params.parentId,
                search:   params.search,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wikis`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_list_listWikis>
        }

        /**
         * Merges multiple PDF files into a single PDF.
         */
        public async mergePdf(params: RequestType<typeof api_workspace_merge_mergePdf>): Promise<ResponseType<typeof api_workspace_merge_mergePdf>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pdf/merge`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_merge_mergePdf>
        }

        /**
         * Splits a PDF into multiple files based on specified pages or ranges.
         */
        public async splitPdf(params: RequestType<typeof api_workspace_split_splitPdf>): Promise<ResponseType<typeof api_workspace_split_splitPdf>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pdf/split`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_split_splitPdf>
        }

        /**
         * Starts a new time tracking entry.
         */
        public async startTimeEntry(params: RequestType<typeof api_workspace_tracking_startTimeEntry>): Promise<ResponseType<typeof api_workspace_tracking_startTimeEntry>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/time/start`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_tracking_startTimeEntry>
        }

        /**
         * Stops a running time entry.
         */
        public async stopTimeEntry(params: RequestType<typeof api_workspace_tracking_stopTimeEntry>): Promise<ResponseType<typeof api_workspace_tracking_stopTimeEntry>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description: params.description,
                duration:    params.duration,
                endTime:     params.endTime,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/time/stop/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_tracking_stopTimeEntry>
        }

        /**
         * Updates an email's read status.
         */
        public async updateEmail(params: RequestType<typeof api_workspace_update_updateEmail>): Promise<void> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                isRead: params.isRead,
            }

            await this.baseClient.callTypedAPI(`/emails/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
        }

        /**
         * Updates an existing note.
         */
        public async updateNote(params: RequestType<typeof api_workspace_update_updateNote>): Promise<ResponseType<typeof api_workspace_update_updateNote>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content: params.content,
                tags:    params.tags,
                title:   params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/notes/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_update_updateNote>
        }

        /**
         * Updates an existing project.
         */
        public async updateProject(params: RequestType<typeof api_workspace_update_updateProject>): Promise<ResponseType<typeof api_workspace_update_updateProject>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description: params.description,
                endDate:     params.endDate,
                name:        params.name,
                startDate:   params.startDate,
                status:      params.status,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/projects/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_update_updateProject>
        }

        /**
         * Updates an existing task.
         */
        public async updateTask(params: RequestType<typeof api_workspace_update_updateTask>): Promise<ResponseType<typeof api_workspace_update_updateTask>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description: params.description,
                dueDate:     params.dueDate,
                priority:    params.priority,
                status:      params.status,
                tags:        params.tags,
                title:       params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_update_updateTask>
        }

        /**
         * Updates an existing wiki page.
         */
        public async updateWiki(params: RequestType<typeof api_workspace_update_updateWiki>): Promise<ResponseType<typeof api_workspace_update_updateWiki>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content: params.content,
                tags:    params.tags,
                title:   params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wikis/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_workspace_update_updateWiki>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.49.1)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
